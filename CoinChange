class Solution {

    public int combination(int[][]dp,int[]coins,int amount,int i,int len)
    {
        
        if(i>=len||amount<0)
        {
            return Integer.MAX_VALUE-1;
        }
        if(amount==0)
            return 0;
        if(dp[amount][i]!=0)
        {
            return dp[amount][i];
        }
        return dp[amount][i] = Math.min(1+(combination(dp,coins,amount-coins[i],i,len)),(combination(dp,coins,amount,i+1,len)));
        
    }
    public int coinChange(int[] coins, int amount) {
        int max;
        int dp[][]=new int[amount+1][coins.length];
        max= combination(dp,coins,amount,0,coins.length);
        if(max==Integer.MAX_VALUE-1)
            return -1;
        return max;
    }
}
// class Solution {
//     public int combination(int i,int[] coins, int amount,int max,List<Integer> l)
//     {
//         if(i>=coins.length||amount<=0)
//         {
//             if(amount==0&&l.size()<max)
//             {
//                 return max=l.size();
//             }
//             return max;
//         }
//         l.add(coins[i]);
//         max=combination(i,coins,amount-coins[i],max,l);
//         l.remove(l.size()-1);
//         max=combination(i+1,coins,amount,max,l);
//         return max;
//     }
//     public int coinChange(int[] coins, int amount) {
//         int max=Integer.MAX_VALUE;
//         List<Integer> l=new LinkedList();
//         max=combination(0,coins,amount,max,l);
//         if(max==Integer.MAX_VALUE)
//             return -1;
//         return max;
//     }
// }
